# Global settings
namespace: carrot-mapper-k8s

scheduler:
  replicaCount: 1
  name: airflow-scheduler
  labels:
    component: airflow
    app: airflow-scheduler
  image:
    repository: ghcr.io/health-informatics-uon/carrot/airflow-scheduler
    tag: "3.2.0"
  env:
    AIRFLOW__CORE__EXECUTE_TASKS_NEW_PYTHON_INTERPRETER: "True"
    AIRFLOW_DEBUG_MODE: "False"
  # This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80

webserver:
  replicaCount: 1
  name: airflow-webserver
  labels:
    component: airflow
    app: airflow-webserver
  image:
    repository: ghcr.io/health-informatics-uon/carrot/airflow-webserver
    tag: "3.2.0"
  env:
    AIRFLOW_ADMIN_USERNAME: "admin"
    AIRFLOW_ADMIN_PASSWORD: "admin"
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80

# Init containers configuration
initContainers:
  waitForApi:
    enabled: true
    image: curlimages/curl:latest
    serviceUrl: "http://api-service:8000/health"
  waitForMinio:
    enabled: true
    image: curlimages/curl:latest
    serviceUrl: "http://minio-service:9000/minio/health/live"
  waitForPostgres:
    enabled: true
    host: postgres-service
    port: 5432
    user: postgres
    password: postgres
    name: postgres
    image: postgres:14

# Configuration data
config:
  AIRFLOW__CORE__EXECUTOR: "LocalExecutor"
  AIRFLOW__CORE__LOAD_EXAMPLES: "false"
  AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "False"
  AIRFLOW__WEBSERVER__WEB_SERVER_PORT: "8080"
  STORAGE_TYPE: "minio"
  AIRFLOW__API__AUTH_BACKEND: "airflow.api.auth.backend.basic_auth"
  AIRFLOW_VAR_MINIO_ENDPOINT: "http://minio-service:9000"
  AIRFLOW_VAR_MINIO_ACCESS_KEY: "minioadmin"
  AIRFLOW__DATABASE__SQL_ALCHEMY_SCHEMA: "airflow"
  AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER: "s3://airflow-logs"
  AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID: "minio_conn"
  AIRFLOW__LOGGING__REMOTE_LOGGING: "True"

# Secret data
secrets:
  AIRFLOW_VAR_MINIO_SECRET_KEY: "minioadmin"
  AIRFLOW__WEBSERVER__SECRET_KEY: "secret"
  AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: "postgresql+psycopg2://postgres:postgres@postgres-service:5432/postgres?options=-csearch_path%3Dairflow"
  AIRFLOW_CONN_POSTGRES_DB_CONN: "postgresql+psycopg2://postgres:postgres@postgres-service:5432/postgres"

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: LoadBalancer
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8080
  targetPort: 8080
  name: http

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false

# Resource configuration
resources:
  requests:
    memory: "256Mi"
    cpu: "250m"
  limits:
    memory: "1Gi"
    cpu: "500m"

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /health
    port: 8080
  initialDelaySeconds: 30
  periodSeconds: 30

readinessProbe:
  httpGet:
    path: /health
    port: 8080
  initialDelaySeconds: 10
  periodSeconds: 10
